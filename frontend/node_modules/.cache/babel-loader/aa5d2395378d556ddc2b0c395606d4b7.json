{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS } from '../constants/userConstants';\nexport const info = nome => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // const { data } = await axios.post(\n    //   '/api/create',\n    //   { nome },\n    //   config\n    // )\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: nome\n    }); // localStorage.setItem('userInfo', JSON.stringify(nome))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; //createPeassoa\n// export const register = (name, email, password) => async (dispatch) => {\n//   try {\n//     dispatch({\n//       type: USER_REGISTER_REQUEST,\n//     })\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     }\n//     const { data } = await axios.post(\n//       '/api/users',\n//       { name, email, password },\n//       config\n//     )\n//     dispatch({\n//       type: USER_REGISTER_SUCCESS,\n//       payload: data,\n//     })\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     dispatch({\n//       type: USER_REGISTER_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n//readPeassoa\n// export const getUserDetails = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_DETAILS_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/users/${id}`, config)\n//     dispatch({\n//       type: USER_DETAILS_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_DETAILS_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n//updatePessoa\n// export const updateUserProfile = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(`/api/users/profile`, user, config)\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_SUCCESS,\n//       payload: data,\n//     })\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n//deleteUser\n// export const deleteUser = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_DELETE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     await axios.delete(`/api/users/${id}`, config)\n//     dispatch({ type: USER_DELETE_SUCCESS })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_DELETE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const updateUser = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_UPDATE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, config)\n//     dispatch({ type: USER_UPDATE_SUCCESS })\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n//     dispatch({ type: USER_DETAILS_RESET })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_UPDATE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch({\n//       type: USER_LOGIN_REQUEST,\n//     })\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     }\n//     const { data } = await axios.post(\n//       '/api/users/login',\n//       { email, password },\n//       config\n//     )\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     dispatch({\n//       type: USER_LOGIN_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('userInfo')\n//   localStorage.removeItem('cartItems')\n//   localStorage.removeItem('shippingAddress')\n//   localStorage.removeItem('paymentMethod')\n//   dispatch({ type: USER_LOGOUT })\n//   dispatch({ type: USER_DETAILS_RESET })\n//   dispatch({ type: ORDER_LIST_MY_RESET })\n//   dispatch({ type: USER_LIST_RESET })\n//   document.location.href = '/login'\n// }\n// export const listUsers = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_LIST_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/users`, config)\n//     dispatch({\n//       type: USER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }","map":{"version":3,"sources":["/home/linux/√Årea de Trabalho/CRUD/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","info","nome","dispatch","type","config","headers","payload","error","response","data","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAEEC,eAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAMO,4BANP;AAQA,OAAO,MAAMC,IAAI,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAIA,UAAMM,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CALE,CAWF;AACA;AACA;AACA;AACA;;AAEAH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,kBADC;AAEPO,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR,CAjBE,CAsBF;AACD,GAvBD,CAuBE,OAAOM,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,eADC;AAEPS,MAAAA,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBC,OAAtC,GACIH,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBC,OADxB,GAEIH,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CAjCM,C,CAmCP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios'\nimport {\n\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n\n} from '../constants/userConstants'\n\nexport const info = (nome) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    // const { data } = await axios.post(\n    //   '/api/create',\n    //   { nome },\n    //   config\n    // )\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: nome,\n    })\n\n    // localStorage.setItem('userInfo', JSON.stringify(nome))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\n//createPeassoa\n// export const register = (name, email, password) => async (dispatch) => {\n//   try {\n//     dispatch({\n//       type: USER_REGISTER_REQUEST,\n//     })\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     }\n\n//     const { data } = await axios.post(\n//       '/api/users',\n//       { name, email, password },\n//       config\n//     )\n\n//     dispatch({\n//       type: USER_REGISTER_SUCCESS,\n//       payload: data,\n//     })\n\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     dispatch({\n//       type: USER_REGISTER_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n//readPeassoa\n// export const getUserDetails = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_DETAILS_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.get(`/api/users/${id}`, config)\n\n//     dispatch({\n//       type: USER_DETAILS_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_DETAILS_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n//updatePessoa\n// export const updateUserProfile = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.put(`/api/users/profile`, user, config)\n\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_SUCCESS,\n//       payload: data,\n//     })\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_UPDATE_PROFILE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n//deleteUser\n// export const deleteUser = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_DELETE_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     await axios.delete(`/api/users/${id}`, config)\n\n//     dispatch({ type: USER_DELETE_SUCCESS })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_DELETE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const updateUser = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_UPDATE_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, config)\n\n//     dispatch({ type: USER_UPDATE_SUCCESS })\n\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n\n//     dispatch({ type: USER_DETAILS_RESET })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_UPDATE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch({\n//       type: USER_LOGIN_REQUEST,\n//     })\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     }\n\n//     const { data } = await axios.post(\n//       '/api/users/login',\n//       { email, password },\n//       config\n//     )\n\n//     dispatch({\n//       type: USER_LOGIN_SUCCESS,\n//       payload: data,\n//     })\n\n//     localStorage.setItem('userInfo', JSON.stringify(data))\n//   } catch (error) {\n//     dispatch({\n//       type: USER_LOGIN_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('userInfo')\n//   localStorage.removeItem('cartItems')\n//   localStorage.removeItem('shippingAddress')\n//   localStorage.removeItem('paymentMethod')\n//   dispatch({ type: USER_LOGOUT })\n//   dispatch({ type: USER_DETAILS_RESET })\n//   dispatch({ type: ORDER_LIST_MY_RESET })\n//   dispatch({ type: USER_LIST_RESET })\n//   document.location.href = '/login'\n// }\n\n// export const listUsers = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_LIST_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.get(`/api/users`, config)\n\n//     dispatch({\n//       type: USER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }"]},"metadata":{},"sourceType":"module"}